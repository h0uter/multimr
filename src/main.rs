use clap::Parser;

mod app;
mod config;
mod merge_request;
mod utils;

/// CLI arguments
#[derive(Parser, Debug)]
#[command(author, version, about, long_about = None)]
struct Cli {
    /// Run in dry-run mode (do not actually create MRs)
    #[arg(long)]
    dry_run: bool,
}

fn main() -> color_eyre::Result<()> {
    let cli = Cli::parse();

    utils::ensure_glab_installed();

    // The interactive TUI app
    color_eyre::install()?;
    let terminal = ratatui::init();
    let app = app::App::new(cli.dry_run);
    let app = app.run(terminal)?;
    ratatui::restore();

    if !app.user_input_completed {
        // If the user exited early, we just exit without doing anything
        println!("Exiting without creating merge requests.");
        return Ok(());
    }

    run_commands(app);

    Ok(())
}

/// Runs the commands generated by the app
fn run_commands(app: app::App) {
    println!("Multi MR will now create merge requests for the following repositories:");
    for dir_index in &app.selected_repos {
        println!(" - {}", app.dirs[*dir_index]);
    }

    for dir_index in app.selected_repos {
        let dir = app.dirs[dir_index].clone();
        std::env::set_current_dir(app.cfg.working_dir.join(&dir))
            .unwrap_or_else(|_| panic!("Failed to change directory to: {}", dir));

        let cmd = app.mr.as_ref().expect("somehow no mr specified").create();

        if app.dry_run {
            app.mr
                .as_ref()
                .expect("somehow no mr specified")
                .dry_run(cmd);
        } else {
            app.mr.as_ref().expect("somehow no mr specified").run(cmd);
        }
    }
}

#[cfg(test)]
mod test_main;
